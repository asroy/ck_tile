# SPDX-License-Identifier: MIT
# Copyright (c) 2018-2024, Advanced Micro Devices, Inc. All rights reserved.
# generate kernel instances to speed up compilation

import argparse
import itertools
from pathlib import Path
from typing import List, Optional

DTYPE_MAP = {
    "fp16": "ck::half_t",
    "bf16": "ck::bhalf_t",
}

MASK_MAP = {
    "no" : "FmhaMasks::NoMask",
    "causal" : "FmhaMasks::CausalMask",
    "generic" : "FmhaMasks::GenericMask"
}

MODE_MAP = {
    "batch" : "false",
    "group" : "true"
}

HDIMS = [64, 128]
MASKS = ["no", "causal", "generic"]
DIRECTIONS = ["fwd"]
GEN_DIR = ""

KERNEL_IMPL_TEMPLATE_FWD = """// auto generated by generate_kernels.py
#include "fmha_fwd.hpp"

using kernel_0 = FmhaFwdKernelSelector<{HDIM}, {DTYPE}, {MODE}, {MASK}, true, true>;
FMHA_FWD_KERNEL_DEFINE(kernel_0)
using kernel_1 = FmhaFwdKernelSelector<{HDIM}, {DTYPE}, {MODE}, {MASK}, false, true>;
FMHA_FWD_KERNEL_DEFINE(kernel_1)
using kernel_2 = FmhaFwdKernelSelector<{HDIM}, {DTYPE}, {MODE}, {MASK}, true, false>;
FMHA_FWD_KERNEL_DEFINE(kernel_2)
using kernel_3 = FmhaFwdKernelSelector<{HDIM}, {DTYPE}, {MODE}, {MASK}, false, false>;
FMHA_FWD_KERNEL_DEFINE(kernel_3)
"""

class Kernel:
    def __init__(self,
                direction: str,
                hdim: int,
                dtype: str,
                mode : str,
                mask : str):
        self.direction = direction
        self.hdim = hdim
        self.dtype = dtype
        self.mode = mode
        self.mask = mask

    @property
    def template(self) -> str:
        if self.direction == "fwd":
            return KERNEL_IMPL_TEMPLATE_FWD.format(
                HDIM=self.hdim, DTYPE=DTYPE_MAP[self.dtype],
                MODE=MODE_MAP[self.mode], MASK=MASK_MAP[self.mask])

    @property
    def filename(self) -> str:
        return f"fmha_{self.direction}_hdim{self.hdim}_{self.dtype}_{self.mode}_{self.mask}_mask.cpp"

def get_all_kernels() -> List[Kernel]:
    for direction, hdim, dtype, mode, mask in itertools.product(DIRECTIONS, HDIMS, DTYPE_MAP.keys(), MODE_MAP.keys(), MASK_MAP.keys()):
        yield Kernel(direction=direction, hdim=hdim, dtype=dtype, mode=mode, mask=mask)

def write_single_kernel(kernel: Kernel, autogen_dir: Path) -> None:
    credit = """// SPDX-License-Identifier: MIT
// Copyright (c) 2018-2024, Advanced Micro Devices, Inc. All rights reserved.\n
"""
    (autogen_dir / kernel.filename).write_text(credit + kernel.template)

def write_kernels(output_dir: Optional[str]) -> None:
    if output_dir is None:
        output_dir = Path(__file__).parent
    else:
        output_dir = Path(output_dir) / GEN_DIR

    output_dir.mkdir(parents=True, exist_ok=True)
    for kernel in get_all_kernels():
        write_single_kernel(kernel, output_dir)

def list_kernels(to_file: Optional[str]) -> None:
    assert to_file is not None
    file_path = Path(to_file)
    with file_path.open('a') as f:
        for kernel in get_all_kernels():
            f.write(str(file_path.parent / GEN_DIR / kernel.filename) + "\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog="generate_kernels",
        description="gen kernels for CK fmha kernel instances",
    )
    parser.add_argument(
        "-o",
        "--output_dir",
        required=False,
        help="Where to generate the kernels "
        " will default to the current directory ",
    )
    parser.add_argument(
        "-l",
        "--list_kernels",
        required=False,
        help="list all the kernels to a file"
    )
    args = parser.parse_args()
    if args.list_kernels is not None:
        list_kernels(args.list_kernels)
    else:
        write_kernels(args.output_dir)
